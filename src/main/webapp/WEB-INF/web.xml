<?xml version="1.0" encoding="UTF-8"?>
<web-app version="2.5" xmlns="http://java.sun.com/xml/ns/javaee"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://java.sun.com/xml/ns/javaee   http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd">

    <context-param>
        <param-name>systemState</param-name>
        <param-value>debug</param-value>
    </context-param>
    <context-param>
        <param-name>log4jConfigLocation</param-name>
        <param-value>classpath:log4j.properties</param-value>
    </context-param>

    <!-- hostfilter -->
    <filter>
        <filter-name>Host Filter</filter-name>
        <filter-class>com.jc.system.security.filter.HostAttackFilter</filter-class>
    </filter>
    <filter-mapping>
        <filter-name>Host Filter</filter-name>
        <url-pattern>/*</url-pattern>
    </filter-mapping>
    <!-- hostfilter -->

    <listener>
        <listener-class>
            org.springframework.web.util.Log4jConfigListener
        </listener-class>
    </listener>
    <!-- jstl -->
    <listener>
        <listener-class>
            org.springframework.web.context.request.RequestContextListener
        </listener-class>
    </listener>

    <filter>
        <filter-name>encodingFilter</filter-name>
        <filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>
        <init-param>
            <param-name>encoding</param-name>
            <param-value>utf-8</param-value>
        </init-param>
    </filter>
    <filter-mapping>
        <filter-name>encodingFilter</filter-name>
        <url-pattern>/*</url-pattern>
    </filter-mapping>

    <!-- 单点登录 -->
    <filter>
        <filter-name>CAS Single Sign Out Filter</filter-name>
        <filter-class>org.cas.client.session.SingleSignOutFilter</filter-class>
    </filter>
    <filter-mapping>
        <filter-name>CAS Single Sign Out Filter</filter-name>
        <url-pattern>/*</url-pattern>
    </filter-mapping>
    <listener>
        <listener-class>org.cas.client.session.SingleSignOutHttpSessionListener</listener-class>
    </listener>
    <!-- 单点登录 -->

    <!-- 漏洞过滤-->
    <filter>
        <filter-name>XssFilter</filter-name>
        <filter-class>com.jc.foundation.filter.XssFilter</filter-class>
    </filter>
    <filter-mapping>
        <filter-name>XssFilter</filter-name>
        <url-pattern>/*</url-pattern>
    </filter-mapping>

    <filter>
        <filter-name>XssSqlFilter</filter-name>
        <filter-class>com.jc.foundation.filter.XssUrlFilter</filter-class>
    </filter>
    <filter-mapping>
        <filter-name>XssSqlFilter</filter-name>
        <url-pattern>/*</url-pattern>
        <dispatcher>REQUEST</dispatcher>
    </filter-mapping>

    <!-- 漏洞过滤-->

    <jsp-config>
        <!-- <taglib>
            <taglib-uri>http://www.horizon.cn/taglib/path</taglib-uri>
            <taglib-location>/WEB-INF/tlds/horizon.tld</taglib-location>
      </taglib> -->
        <taglib>
            <taglib-uri>fmt</taglib-uri>
            <taglib-location>/WEB-INF/tlds/fmt.tld</taglib-location>
        </taglib>
        <taglib>
            <taglib-uri>c</taglib-uri>
            <taglib-location>/WEB-INF/tlds/c.tld</taglib-location>
        </taglib>
        <taglib>
            <taglib-uri>fn</taglib-uri>
            <taglib-location>/WEB-INF/tlds/fn.tld</taglib-location>
        </taglib>
    </jsp-config>

    <!-- jstl end -->

    <welcome-file-list>
        <welcome-file>index.jsp</welcome-file>
    </welcome-file-list>
    <login-config>
        <auth-method>BASIC</auth-method>
    </login-config>

    <!-- Apollo 集成相关 start -->
    <!-- 注意集成Apollo后必需设置系统环境变量 -->
    <!--<context-param>
        <param-name>spring.profiles.active</param-name>
        <param-value>${ENABLED_CONFIG_CENTER}</param-value>
    </context-param>

    <listener>
        <listener-class>com.jc.foundation.config.EnvorimentConfigListener</listener-class>
    </listener>-->
    <!-- Apollo 集成相关 end -->

    <context-param>
        <param-name>contextConfigLocation</param-name>
        <param-value>classpath*:conf/**/applicationContext*.xml classpath*:applicationContext*.xml classpath*:workflow.xml classpath*:conf/application-workflow.xml classpath*:kafka-producer.xml classpath*:spring-rabbitmq.xml </param-value>
    </context-param>

    <listener>
        <listener-class>com.jc.system.SystemListener</listener-class>
    </listener>
    <servlet>
        <servlet-name>goa</servlet-name>
        <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
        <load-on-startup>1</load-on-startup>
    </servlet>
    <servlet-mapping>
        <servlet-name>goa</servlet-name>
        <url-pattern>/</url-pattern>
    </servlet-mapping>


    <!-- Shiro Security filter -->
    <filter>
        <filter-name>shiroFilter</filter-name>
        <filter-class>org.springframework.web.filter.DelegatingFilterProxy</filter-class>
        <init-param>
            <param-name>targetFilterLifecycle</param-name>
            <param-value>true</param-value>
        </init-param>
    </filter>
    <filter-mapping>
        <filter-name>shiroFilter</filter-name>
        <url-pattern>/*</url-pattern>
        <dispatcher>REQUEST</dispatcher>
        <dispatcher>FORWARD</dispatcher>
    </filter-mapping>

    <filter>
        <filter-name>CASWebFilter</filter-name>
        <filter-class>org.springframework.web.filter.DelegatingFilterProxy</filter-class>
    </filter>

    <filter-mapping>
        <filter-name>CASWebFilter</filter-name>
        <url-pattern>/*</url-pattern>
    </filter-mapping>

    <filter>
	  <filter-name>cors</filter-name>
	  <filter-class>com.jc.system.security.filter.JCCorsFilter</filter-class>
	</filter>
	<filter-mapping>
	  <filter-name>cors</filter-name>
	  <url-pattern>/*</url-pattern>
	</filter-mapping>
<!--    <filter>-->
<!--        <filter-name>tokenFilter</filter-name>-->
<!--        <filter-class>com.jc.system.gateway.filter.ResolveTokenFilter</filter-class>-->
<!--    </filter>-->
<!--    <filter-mapping>-->
<!--        <filter-name>tokenFilter</filter-name>-->
<!--        <url-pattern>/*</url-pattern>-->
<!--    </filter-mapping>-->

    <!-- 验证码相关属性的配置 -->
    <servlet>
        <servlet-name>Kaptcha</servlet-name>
        <servlet-class>com.google.code.kaptcha.servlet.KaptchaServlet</servlet-class>
        <!-- 定义 Kaptcha 的样式 -->
        <!-- 是否有边框 -->
        <init-param>
            <param-name>kaptcha.border</param-name>
            <param-value>no</param-value>
        </init-param>
        <!-- 字体颜色 -->
        <init-param>
            <param-name>kaptcha.textproducer.font.color</param-name>
            <param-value>red</param-value>
        </init-param>
        <!-- 图片宽度 -->
        <init-param>
            <param-name>kaptcha.image.width</param-name>
            <param-value>100</param-value>
        </init-param>
        <!-- 图片高度 -->
        <init-param>
            <param-name>kaptcha.image.height</param-name>
            <param-value>30</param-value>
        </init-param>
        <!-- 使用哪些字符生成验证码 -->
        <init-param>
            <param-name>kaptcha.textproducer.char.string</param-name>
            <param-value>ACDEFHKPRSTWX345975</param-value>
        </init-param>
        <!-- 字体大小 -->
        <init-param>
            <param-name>kaptcha.textproducer.font.size</param-name>
            <param-value>26</param-value>
        </init-param>
        <!-- 干扰线的颜色 -->
        <init-param>
            <param-name>kaptcha.noise.color</param-name>
            <param-value>black</param-value>
        </init-param>
        <!-- 字符个数 -->
        <init-param>
            <param-name>kaptcha.textproducer.char.length</param-name>
            <param-value>4</param-value>
        </init-param>
        <!-- 字体 -->
        <init-param>
            <param-name>kaptcha.textproducer.font.names</param-name>
            <param-value>Arial</param-value>
        </init-param>
    </servlet>
    <servlet-mapping>
        <servlet-name>Kaptcha</servlet-name>
        <!-- 外部访问路径 -->
        <url-pattern>/Kaptcha</url-pattern>
    </servlet-mapping>

    <!-- 缓存过期策略 start 开发与测试环境暂不启用此配置-->
    <!-- <filter>
           <filter-name>ExpiresFilter</filter-name>
           <filter-class>org.apache.catalina.filters.ExpiresFilter</filter-class>
           <init-param>
              <param-name>ExpiresByType image</param-name>
              <param-value>access plus 1 days</param-value>
           </init-param>
           <init-param>
              <param-name>ExpiresByType text/css</param-name>
              <param-value>access plus 1 days</param-value>
           </init-param>
           <init-param>
              <param-name>ExpiresByType application/javascript</param-name>
              <param-value>access plus 1 days</param-value>
           </init-param>
        </filter>
        <filter-mapping>
           <filter-name>ExpiresFilter</filter-name>
           <url-pattern>/*</url-pattern>
           <dispatcher>REQUEST</dispatcher>
        </filter-mapping>-->
    <!-- 缓存过期策略 end -->
    <!-- 流程配置文件加载 -->
    <!--   <servlet>
        <servlet-name>workflows</servlet-name>
        <servlet-class>com.horizon.workflow.xmlconfig.ConfigLoaderServlet</servlet-class>
        <init-param>
            <param-name>WorkFlow</param-name>
            <param-value>workflow.xml</param-value>
        </init-param>
        <load-on-startup>3</load-on-startup>
</servlet>
    <servlet-mapping>
        <servlet-name>workflows</servlet-name>
        <url-pattern>/workflow.hz</url-pattern>
        </servlet-mapping> -->


    <!-- druid start-->
    <filter>
        <filter-name>DruidWebStatFilter</filter-name>
        <filter-class>com.alibaba.druid.support.http.WebStatFilter</filter-class>
        <init-param>
            <!-- 经常需要排除一些不必要的url，比如.js,/jslib/等等。配置在init-param中 -->
            <param-name>exclusions</param-name>
            <param-value>*.js,*.gif,*.jpg,*.png,*.css,*.ico,/druid/*</param-value>
        </init-param>
        <!-- 缺省sessionStatMaxCount是1000个。你可以按需要进行配置 -->
        <init-param>
            <param-name>sessionStatMaxCount</param-name>
            <param-value>1000</param-value>
        </init-param>
        <!-- druid 0.2.7版本开始支持profile，配置profileEnable能够监控单个url调用的sql列表 -->
        <init-param>
            <param-name>profileEnable</param-name>
            <param-value>true</param-value>
        </init-param>
        <!-- <init-param>
             <param-name>principalSessionName</param-name>
             <param-value>users.username</param-value>
         </init-param>-->
        <!-- 你可以关闭session统计功能
        <init-param>
            <param-name>sessionStatEnable</param-name>
            <param-value>true</param-value>
        </init-param> -->
    </filter>

    <filter-mapping>
        <filter-name>DruidWebStatFilter</filter-name>
        <url-pattern>/*</url-pattern>
    </filter-mapping>

    <servlet>
        <servlet-name>DruidStatView</servlet-name>
        <servlet-class>com.alibaba.druid.support.http.StatViewServlet</servlet-class>
        <!--
            deny优先于allow，如果在deny列表中，就算在allow列表中，也会被拒绝。
            如果allow没有配置或者为空，则允许所有访问
         -->
        <!--<init-param>
            <param-name>allow</param-name>
            <param-value>192.168.200.1/254</param-value>
        </init-param>
        <init-param>
            <param-name>deny</param-name>
            <param-value>192.168.130.29</param-value>
        </init-param>-->
        <!-- 在StatViewSerlvet输出的html页面中，有一个功能是Reset All，执行这个操作之后，会导致所有计数器清零，重新计数 -->
        <init-param>
            <param-name>resetEnable</param-name>
            <param-value>false</param-value>
        </init-param>
        <init-param>
            <param-name>loginUsername</param-name>
            <param-value>jcinfo</param-value>
        </init-param>
        <init-param>
            <param-name>loginPassword</param-name>
            <param-value>jcinfo</param-value>
        </init-param>
    </servlet>
    <servlet-mapping>
        <servlet-name>DruidStatView</servlet-name>
        <url-pattern>/druid/*</url-pattern>
    </servlet-mapping>
    <!-- druid end-->

    <filter>
        <filter-name>monitoring</filter-name>
        <filter-class>net.bull.javamelody.MonitoringFilter</filter-class>
    </filter>
    <filter-mapping>
        <filter-name>monitoring</filter-name>
        <url-pattern>/*</url-pattern>
    </filter-mapping>
    <listener>
        <listener-class>net.bull.javamelody.SessionListener</listener-class>
    </listener>


    <session-config>
        <session-timeout>-1</session-timeout>
    </session-config>

    <error-page>
        <error-code>404</error-code>
        <location>/WEB-INF/web/error/500.jsp</location>
    </error-page>
    <error-page>
        <error-code>401</error-code>
        <location>/WEB-INF/web/error/401.jsp</location>
    </error-page>
    <error-page>
        <error-code>500</error-code>
        <location>/WEB-INF/web/error/500.jsp</location>
    </error-page>

    <!-- 设置JS文件Header防止IE8解析时因无法自动识别字符集造成异常 -->
    <mime-mapping>
        <extension>js</extension>
        <mime-type>application/javascript;charset=UTF-8</mime-type>
    </mime-mapping>

</web-app>
